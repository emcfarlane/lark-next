// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TutorialsClient is the client API for Tutorials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TutorialsClient interface {
	// Get a tutorial.
	GetTutorial(ctx context.Context, in *GetTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error)
	// Lists tutorials.
	ListTutorials(ctx context.Context, in *ListTutorialsRequest, opts ...grpc.CallOption) (*ListTutorialsResponse, error)
	// Creates a tutorial.
	CreateTutorial(ctx context.Context, in *CreateTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error)
	// Updates a tutorial.
	UpdateTutorial(ctx context.Context, in *UpdateTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error)
	// Deletes a tutorial.
	DeleteTutorial(ctx context.Context, in *DeleteTutorialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tutorialsClient struct {
	cc grpc.ClientConnInterface
}

func NewTutorialsClient(cc grpc.ClientConnInterface) TutorialsClient {
	return &tutorialsClient{cc}
}

func (c *tutorialsClient) GetTutorial(ctx context.Context, in *GetTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error) {
	out := new(Tutorial)
	err := c.cc.Invoke(ctx, "/star.api.Tutorials/GetTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialsClient) ListTutorials(ctx context.Context, in *ListTutorialsRequest, opts ...grpc.CallOption) (*ListTutorialsResponse, error) {
	out := new(ListTutorialsResponse)
	err := c.cc.Invoke(ctx, "/star.api.Tutorials/ListTutorials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialsClient) CreateTutorial(ctx context.Context, in *CreateTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error) {
	out := new(Tutorial)
	err := c.cc.Invoke(ctx, "/star.api.Tutorials/CreateTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialsClient) UpdateTutorial(ctx context.Context, in *UpdateTutorialRequest, opts ...grpc.CallOption) (*Tutorial, error) {
	out := new(Tutorial)
	err := c.cc.Invoke(ctx, "/star.api.Tutorials/UpdateTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorialsClient) DeleteTutorial(ctx context.Context, in *DeleteTutorialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/star.api.Tutorials/DeleteTutorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TutorialsServer is the server API for Tutorials service.
// All implementations must embed UnimplementedTutorialsServer
// for forward compatibility
type TutorialsServer interface {
	// Get a tutorial.
	GetTutorial(context.Context, *GetTutorialRequest) (*Tutorial, error)
	// Lists tutorials.
	ListTutorials(context.Context, *ListTutorialsRequest) (*ListTutorialsResponse, error)
	// Creates a tutorial.
	CreateTutorial(context.Context, *CreateTutorialRequest) (*Tutorial, error)
	// Updates a tutorial.
	UpdateTutorial(context.Context, *UpdateTutorialRequest) (*Tutorial, error)
	// Deletes a tutorial.
	DeleteTutorial(context.Context, *DeleteTutorialRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTutorialsServer()
}

// UnimplementedTutorialsServer must be embedded to have forward compatible implementations.
type UnimplementedTutorialsServer struct {
}

func (UnimplementedTutorialsServer) GetTutorial(context.Context, *GetTutorialRequest) (*Tutorial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTutorial not implemented")
}
func (UnimplementedTutorialsServer) ListTutorials(context.Context, *ListTutorialsRequest) (*ListTutorialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTutorials not implemented")
}
func (UnimplementedTutorialsServer) CreateTutorial(context.Context, *CreateTutorialRequest) (*Tutorial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTutorial not implemented")
}
func (UnimplementedTutorialsServer) UpdateTutorial(context.Context, *UpdateTutorialRequest) (*Tutorial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTutorial not implemented")
}
func (UnimplementedTutorialsServer) DeleteTutorial(context.Context, *DeleteTutorialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTutorial not implemented")
}
func (UnimplementedTutorialsServer) mustEmbedUnimplementedTutorialsServer() {}

// UnsafeTutorialsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TutorialsServer will
// result in compilation errors.
type UnsafeTutorialsServer interface {
	mustEmbedUnimplementedTutorialsServer()
}

func RegisterTutorialsServer(s grpc.ServiceRegistrar, srv TutorialsServer) {
	s.RegisterService(&Tutorials_ServiceDesc, srv)
}

func _Tutorials_GetTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialsServer).GetTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/star.api.Tutorials/GetTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialsServer).GetTutorial(ctx, req.(*GetTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tutorials_ListTutorials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTutorialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialsServer).ListTutorials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/star.api.Tutorials/ListTutorials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialsServer).ListTutorials(ctx, req.(*ListTutorialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tutorials_CreateTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialsServer).CreateTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/star.api.Tutorials/CreateTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialsServer).CreateTutorial(ctx, req.(*CreateTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tutorials_UpdateTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialsServer).UpdateTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/star.api.Tutorials/UpdateTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialsServer).UpdateTutorial(ctx, req.(*UpdateTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tutorials_DeleteTutorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTutorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorialsServer).DeleteTutorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/star.api.Tutorials/DeleteTutorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorialsServer).DeleteTutorial(ctx, req.(*DeleteTutorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tutorials_ServiceDesc is the grpc.ServiceDesc for Tutorials service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tutorials_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "star.api.Tutorials",
	HandlerType: (*TutorialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTutorial",
			Handler:    _Tutorials_GetTutorial_Handler,
		},
		{
			MethodName: "ListTutorials",
			Handler:    _Tutorials_ListTutorials_Handler,
		},
		{
			MethodName: "CreateTutorial",
			Handler:    _Tutorials_CreateTutorial_Handler,
		},
		{
			MethodName: "UpdateTutorial",
			Handler:    _Tutorials_UpdateTutorial_Handler,
		},
		{
			MethodName: "DeleteTutorial",
			Handler:    _Tutorials_DeleteTutorial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apipb/api.proto",
}
